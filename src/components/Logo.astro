---
/* Astro 컴포넌트: 헤더에 바로 넣어 사용하세요.
   <StickerLogo size={40} class="ml-2" />
*/
const { size = 40, class: cls = "" } = Astro.props;
---

<!-- CDN: Alpine / GSAP / Draggable / animate.css -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/animate.css@4.1.1/animate.min.css">
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/gsap@3/dist/gsap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/gsap@3/dist/Draggable.min.js"></script>

<!-- Sticker -->
<div
  x-data="stickerPeel({ size: Number($el.dataset.size) })"
  x-init="init($el)"
  data-size={size}
  class={`relative ${cls}`}
  style="--size: {size}px; --peel: 0%; --orange:#DA6621;"
>

  <!-- 숨김 SVG: 조명/그림자용 필터 -->
  <svg width="0" height="0" class="absolute">
    <defs>
      <filter id="dropShadow">
        <feDropShadow dx="2" dy="4" stdDeviation="2.5" flood-color="black" flood-opacity="0.25"/>
      </filter>
    </defs>
  </svg>

  <!-- 드래그 타깃 -->
  <div class="drag animate__animated animate__fadeInDown"
       style="touch-action: none;">
    <!-- 스티커 컨테이너 -->
    <div class="sticker relative grid place-items-center"
         style="width:var(--size); height:var(--size);">

      <!-- 앞면: 오렌지 원 -->
      <div class="absolute inset-0 rounded-full"
           style="background:var(--orange); filter:url(#dropShadow);"></div>

      <!-- 텍스트: HJ + 점(.)  → 베이스라인 맞춤 -->
      <div class="relative z-[3] pointer-events-none flex items-baseline gap-[0.1em] translate-y-[2%]">
        <span class="font-extrabold text-white leading-none"
              style="font-family: 'SK Modernist', system-ui, -apple-system, Segoe UI, Roboto, sans-serif; font-size: calc(var(--size)*0.42);">
          HJ
        </span>
        <span class="inline-block rounded-full bg-white translate-y-[0.06em]"
              style="width:0.34em; height:0.34em;"></span>
      </div>

      <!-- ① 바깥 평면(삼각) : 완전 평평 -->
      <div class="peel-flat absolute right-[-1px] top-[-1px] z-[4]"
           style="
             width:56%; height:56%;
             clip-path: polygon(102% 0, -2% 0, 102% 102%);
             transform-origin: 100% 0;
             background: linear-gradient(135deg,#fff,#F8EFE4 70%);
             backface-visibility: hidden;
           ">
      </div>

      <!-- ② 안쪽 곡면(뒤집힌 종이) + 그림자 -->
      <div class="peel-curve absolute right-[-1px] top-[-1px] z-[3]"
           style="
             width:58%; height:58%;
             clip-path: polygon(102% 0, -2% 0, 102% 102%);
             transform-origin: 100% 0;
             backface-visibility: hidden;
             background:
               radial-gradient(120% 90% at 60% 40%, #F8EFE4 0%, #FFFFFF 35%, #E9D9C8 92%);
             filter: drop-shadow(-8px 12px 14px rgba(0,0,0,.22));
           ">
      </div>

      <!-- 가장자리 접촉 그림자(깊이감) -->
      <div class="peel-contact absolute right-[-1px] top-[-1px] z-[2] pointer-events-none"
           style="
             width:60%; height:60%;
             clip-path: polygon(102% 0, -2% 0, 102% 102%);
             box-shadow: -10px 14px 22px rgba(0,0,0,.22);
             border-top-right-radius:0;
           ">
      </div>

      <!-- 원 안쪽 얇은 림: 경계 틈 방지 -->
      <div class="absolute inset-0 rounded-full pointer-events-none"
           style="box-shadow: inset 0 0 0 0.5px rgba(0,0,0,.08);"></div>
    </div>
  </div>

  <style is:global>
    .sticker {
      overflow: visible;                 /* 접힘 부분이 밖으로 나와야 함 */
      transform-style: preserve-3d;
      perspective: 900px;
      cursor: grab;
    }
    .sticker:active { cursor: grabbing; }

    /* 드래그/호버로 접힘 정도 제어: --peel (0%~60%) */
    .sticker .peel-flat  { transform: rotateX(calc(var(--peel) * 2.6)); transition: transform .14s linear; }
    .sticker .peel-curve { transform: rotateX(calc(90deg - var(--peel) * 1.5)); opacity: min(1, calc(var(--peel)/6)); transition: transform .14s linear, opacity .14s linear; }
    .sticker .peel-contact { opacity: min(1, calc(var(--peel)/8)); transition: opacity .14s linear; }

    /* 마우스만으로도 테스트 가능하도록 hover fallback */
    .sticker:hover { --peel: 30%; }
    .sticker:active { --peel: 45%; }
  </style>

  <script>
    // Alpine 컴포넌트 (GSAP Draggable 사용)
    window.stickerPeel = ({ size = 40 }) => ({
      init(root) {
        const drag = root.querySelector('.drag');
        const sticker = root.querySelector('.sticker');

        // 시작값
        gsap.set(drag, { x: 0, y: 0, rotation: 0 });

        // 드래그 → 접힘(%)
        const maxPeel = 60;                     // 최대 접힘 %
        const maxDist = Math.max(120, size * 1.6);

        gsap.registerPlugin(Draggable);
        Draggable.create(drag, {
          type: 'x,y',
          bounds: root,
          inertia: true,
          onPress() {
            this._sx = this.x; this._sy = this.y;
          },
          onDrag() {
            // 회전 반응
            const rot = gsap.utils.clamp(-24, 24, this.deltaX * 0.4);
            gsap.to(drag, { rotation: rot, duration: 0.12, ease: 'power1.out' });

            // 거리 → peel %
            const dx = this.x - (this._sx ?? 0);
            const dy = this.y - (this._sy ?? 0);
            const dist = Math.hypot(dx, dy);
            const peel = gsap.utils.clamp(0, maxPeel, (dist / maxDist) * maxPeel);

            sticker.style.setProperty('--peel', peel + '%');
          },
          onRelease() {
            gsap.to(drag, { rotation: 0, duration: .5, ease: 'power2.out' });
            // 스냅 백
            gsap.to(sticker, { '--peel': '0%', duration: .35, ease: 'power2.out' });
          }
        });
      }
    })
  </script>
</div>
