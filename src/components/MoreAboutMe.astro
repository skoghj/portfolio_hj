---
---
<!-- ============== About / Folder Stack section ============== -->
<section id="about-folders" class="section">
  <div class="container">
    <!-- Left: copy -->
    <div class="copy parallax" data-depth="0.1">
      <h2>More about me</h2>
      <p>I build playful, story-driven interactions that feel alive.</p>
    </div>

    <!-- Right: stacked folders -->
    <div class="stack parallax" data-depth="0.2" aria-label="folder stack">
      <!-- 각 폴더는 버튼. data-*에 보여줄 콘텐츠를 넣어두고 클릭 시 drawer로 전달 -->
      <button class="folder f1"
        data-title="Blue — Tools I love"
        data-image="/1.svg"
        data-text="Figma, VS Code, GitHub로 작업해요. 필요하면 간단한 툴도 직접 만들어요.">
      </button>

      <button class="folder f2"
        data-title="Pink — Side Projects"
        data-image="/2.svg"
        data-text="작은 인터랙션 실험들을 즐깁니다. 애니메이션·제스처에 관심이 많아요.">
      </button>

      <button class="folder f3"
        data-title="Green — Process"
        data-image="/3.svg"
        data-text="빠른 프로토타입 → 사용자 피드백 → 다듬기. 기록을 남기는 편이에요.">
      </button>

      <button class="folder f4"
        data-title="Yellow — Background"
        data-image="/4.svg"
        data-text="스토리텔링 기반 UI/브랜딩을 해왔고, 프론트엔드 협업을 좋아해요.">
      </button>

      <button class="folder f5"
        data-title="Gray — Contact"
        data-image="/5.svg"
        data-text="프로젝트가 있다면 언제든 편하게 연락 주세요 :)">
      </button>
    </div>
  </div>

  <!-- Drawer (섹션 내부에서 열리고 닫히는 영역) -->
  <div class="drawer" aria-hidden="true">
    <div class="drawer-inner">
      <div class="drawer-head">
        <h3 id="drawerTitle">Title</h3>
        <button class="close" aria-label="Close">×</button>
      </div>
      <div class="drawer-body">
        <img id="drawerImg" alt="" />
        <p id="drawerText"></p>
      </div>
    </div>
  </div>
</section>

<style>
  /* layout */
  .section { position: relative; overflow: clip; background:#e7f4f7; }
  .container{
    max-width:1200px; margin:0 auto; padding:64px 20px;
    display:grid; grid-template-columns:1fr 1fr; gap:32px; align-items:center;
    min-height:640px;
  }
  .copy h2{ font-size: clamp(28px, 4vw, 44px); margin:0 0 12px; }
  .copy p{ color:#333; opacity:.8; margin:0; }

  /* stacked folders */
  .stack{ position:relative; height:520px; }
  .folder{
    position:absolute; left:0; right:0; margin-inline:auto;
    width:min(540px, 80%); height:220px; border:0; padding:0; cursor:pointer;
    background-size:contain; background-repeat:no-repeat; background-position:center bottom;
    transform:translateY(0) translateZ(0); transition:transform .35s ease, filter .35s ease;
    filter:drop-shadow(0 10px 18px rgba(0,0,0,.08));
  }
  .folder:focus-visible{ outline:2px solid #222; outline-offset:4px; }
  /* 각 폴더 배경(SVG) & 위치(겹침) */
  .f1{ z-index:5; bottom:0;    background-image:url("/1.svg"); }
  .f2{ z-index:4; bottom:80px; background-image:url("/2.svg"); }
  .f3{ z-index:3; bottom:150px;background-image:url("/3.svg"); }
  .f4{ z-index:2; bottom:220px;background-image:url("/4.svg"); }
  .f5{ z-index:1; bottom:290px;background-image:url("/5.svg"); }

  /* hover 살짝 튀어나오는 느낌 */
  .folder:hover{ transform:translateY(-6px); filter:drop-shadow(0 16px 26px rgba(0,0,0,.14)); }

  /* Drawer */
  .drawer{
    position:relative; max-width:1200px; margin: 0 auto; padding:0 20px 40px;
    display:none;
  }
  .drawer[open]{ display:block; }
  .drawer-inner{
    background:#fff; border-radius:16px; box-shadow: 0 12px 40px rgba(0,0,0,.12);
    overflow:hidden; animation:slideIn .35s ease;
  }
  .drawer-head{
    display:flex; align-items:center; gap:12px; justify-content:space-between;
    padding:16px 20px; background:#f6fafb; border-bottom:1px solid #e7eef0;
  }
  .drawer-head h3{ margin:0; font-size:20px; }
  .drawer-head .close{
    border:0; background:#101012; color:#fff; width:32px; height:32px; border-radius:8px;
    cursor:pointer; line-height:32px; font-size:20px; display:grid; place-items:center;
  }
  .drawer-body{ display:grid; grid-template-columns:320px 1fr; gap:20px; padding:20px; }
  .drawer-body img{ width:100%; height:220px; object-fit:cover; border-radius:10px; }
  @media (max-width: 900px){
    .container{ grid-template-columns:1fr; }
    .stack{ height:440px; order:2; }
    .drawer-body{ grid-template-columns:1fr; }
  }
  @keyframes slideIn{
    from{ transform:translateY(8px); opacity:0 }
    to{ transform:translateY(0); opacity:1 }
  }
</style>

<script>
  // -------- parallax (가벼운 스크롤 패럴랙스)
  (() => {
    const section = document.querySelector('#about-folders');
    const layers = section.querySelectorAll('.parallax');

    const onScroll = () => {
      const rect = section.getBoundingClientRect();
      // 섹션이 보일 때만 계산
      if (rect.bottom < 0 || rect.top > innerHeight) return;
      const progress = (innerHeight - rect.top) / (innerHeight + rect.height); // 0~1 근사
      layers.forEach(el => {
        const depth = parseFloat(el.dataset.depth || 0.1);
        el.style.transform = `translateY(${(progress - 0.5) * depth * -60}px)`;
      });
    };
    addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  })();

  // -------- folder click -> drawer 열기/업데이트/닫기
  (() => {
    const sec = document.querySelector('#about-folders');
    const drawer = sec.querySelector('.drawer');
    const title = sec.querySelector('#drawerTitle');
    const img = sec.querySelector('#drawerImg');
    const text = sec.querySelector('#drawerText');
    const closeBtn = sec.querySelector('.drawer .close');

    function openFrom(btn){
      title.textContent = btn.dataset.title || 'Details';
      const src = btn.dataset.image;
      if (src){ img.src = src; img.style.display = ''; }
      else { img.removeAttribute('src'); img.style.display = 'none'; }
      text.textContent = btn.dataset.text || '';
      drawer.setAttribute('open','');
      drawer.setAttribute('aria-hidden','false');
      // 살짝 스크롤 붙여주기(섹션 안에서 열리는 느낌)
      drawer.scrollIntoView({ behavior:'smooth', block:'nearest' });
    }
    function close(){
      drawer.removeAttribute('open');
      drawer.setAttribute('aria-hidden','true');
    }

    sec.querySelectorAll('.folder').forEach(btn=>{
      btn.addEventListener('click', ()=>openFrom(btn));
      // 키보드 접근성
      btn.addEventListener('keydown', (e)=>{
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); openFrom(btn); }
      });
    });
    closeBtn.addEventListener('click', close);
  })();
</script>
